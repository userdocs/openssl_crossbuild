name: openssl crossbuild package release

on:
  workflow_dispatch:
    inputs:
      skip_rerun:
        description: "Skip rerun?"
        required: true
        default: false
        type: boolean
      retries:
        description: "Number of rerun retries"
        required: true
        default: "1"
        type: choice
        options: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      openssl_version: ${{ steps.version_info.outputs.openssl_version }}
    strategy:
      fail-fast: false
      matrix:
        name: [openssl]
        os_id: [debian, ubuntu]
        os_codename: [bullseye, bookworm, focal, jammy, noble]
        arch: [amd64, armhf, arm64]
        include:
          - arch: amd64
            cross_openssl: "linux-x86_64"
          - arch: armhf
            cross_openssl: "linux-armv4"
          - arch: arm64
            cross_openssl: "linux-aarch64"
        exclude:
          - os_id: debian
            os_codename: focal
          - os_id: debian
            os_codename: jammy
          - os_id: debian
            os_codename: noble
          - os_id: ubuntu
            os_codename: bullseye
          - os_id: ubuntu
            os_codename: bookworm

    name: ${{ matrix.os_id }}:${{ matrix.os_codename }} ${{ matrix.name }} ${{ matrix.arch }}

    env:
      opt_dir_name: "opt/local"
      github_branch: "master"
      cxx_standard: "20"
      GH_TOKEN: "${{ github.token }}"

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Host - set up qemu-user-static binfmt-support
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d  -v ${{ github.workspace }}:/home/github ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.arch }}

      - name: Docker - zlib-ng download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/userdocs/zlib-ng-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb
          docker exec multiarch dpkg -i ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb

      - name: Host - Git clone ${{ matrix.name }} ${{ env.github_branch }}
        run: git clone --single-branch --branch "${{ env.github_branch }}" --shallow-submodules --recurse-submodules --depth 1 https://github.com/openssl/openssl.git ${{ matrix.name }}

      - name: Host - Set ${{ matrix.name }} version to variable
        id: version_info
        run: |
          openssl_version="$(source openssl/VERSION.dat; printf '%s' "$MAJOR.$MINOR.$PATCH")"
          printf '%s\n' "openssl_version=${openssl_version}" >> $GITHUB_ENV
          printf '%s\n' "openssl_version=${openssl_version}" >> $GITHUB_OUTPUT

      - name: Docker - ${{ matrix.name }} configure
        run: docker exec -u github:github -w /home/github/openssl multiarch ./Configure ${{ matrix.cross_openssl }} --prefix="/home/github/build/${{ env.opt_dir_name }}" --libdir=lib --openssldir=/etc/ssl zlib

      - name: Docker - dump preferences for openssl
        run: docker exec -u github:github -w /home/github/openssl multiarch perl configdata.pm --dump

      - name: Docker - Make build openssl
        run: docker exec -u github:github -w /home/github/openssl multiarch make -j $(nproc)

      - name: Docker - Make install_sw openssl
        run: docker exec -u github:github -w /home/github/openssl multiarch make install_sw

      - name: Docker - ldconfig - create /etc/ld.so.conf.d/openssl.conf
        run: |
          docker exec -u github:github -w /home/github/build multiarch mkdir -p etc/ld.so.conf.d
          docker exec -u github:github -w /home/github/build/etc/ld.so.conf.d multiarch bash -c "printf '%s\n' '/${{ env.opt_dir_name }}/lib' > openssl.conf"

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v4
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.openssl_version }}"
          depends: "zlib-ng"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ env.openssl_version }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_codename }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.openssl_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - upload deb packages
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}-deb"
          path: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

  release:
    name: Upload artifacts to release
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    needs: [build]
    if: needs.build.result == 'success'
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      openssl_version: ${{ needs.build.outputs.openssl_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Host - Download artifacts
        uses: actions/download-artifact@v4

      - name: Host - artifacts organise for release
        run: |
          mkdir -p "releases"
          for files in *-deb; do
              cp -rf ${files}/* "releases/"
          done

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: releases/*.deb
          replacesArtifacts: true
          tag: "${{ env.openssl_version }}"
          name: "openssl ${{ env.openssl_version }}"
          body: "openssl built from github latest release on amd64 arm64 armhf for Debian Bullseye Bookworm and Ubuntu Focal Jammy Noble"
          allowUpdates: true

  ci-auto-rerun-failed-jobs:
    if: failure() && (github.event.inputs.skip_rerun || 'false') == 'false'
    needs: [release]
    concurrency:
      group: ci-auto-rerun-failed-jobs
      cancel-in-progress: true
    permissions:
      actions: write
    runs-on: ubuntu-24.04-arm
    env:
      GH_TOKEN: "${{ secrets.AUTO_RERUN || github.token }}"
      github_repo: "" # To use ci-auto-rerun-failed-jobs.yml hosted in a remote repository else default to the current repository. Requires PAT token AUTO_RERUN
      retries: ${{ github.event.inputs.retries || '1' }}
      distinct_id: ${{ github.event.inputs.distinct_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: ci-auto-rerun-failed-jobs via ${{ env.github_repo || github.repository }}
        run: >
          gh workflow run ci-auto-rerun-failed-jobs-action.yml
          --repo "${github_repo:-$GITHUB_REPOSITORY}"
          -f github_repo=${GITHUB_REPOSITORY}
          -f run_id=${GITHUB_RUN_ID}
          -f attempts=${GITHUB_RUN_ATTEMPT}
          -f retries=${retries}
          -f distinct_id=${distinct_id}
